#!/bin/bash
#imports 
. ${BASH_SOURCE[0]%/*}/../lib/helper.sh
. ${BASH_SOURCE[0]%/*}/../lib/configurator.sh

#environments
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
DOTFILES_TEMPLATES_PATH="${SCRIPT_DIR}/../dotfiles.templates"
DOTFILES_TEMPLATES_DIR=$(readlink -f "$DOTFILES_TEMPLATES_PATH")

#menu
AVAILABLE_MENU=()
AVAILABLE_MENU+=("EXIT exit")
AVAILABLE_MENU+=("gitconfig setup_gitconfig")
AVAILABLE_MENU+=("zsh setup_zsh")
AVAILABLE_MENU+=("vundle setup_vundle")
AVAILABLE_MENU+=("tmux_conf setup_tmux_config")
AVAILABLE_MENU+=("zplug setup_zplug")
AVAILABLE_MENU+=("rest_zshrc setup_init_zsh")
AVAILABLE_MENU+=("gituser input_git_user")
MENU_NAMES=$(entries_to_words AVAILABLE_MENU[@] 1)
MENU_FNS=$(entries_to_words AVAILABLE_MENU[@] 2)

#application
setup_gitconfig (){
  if [[ ! -f "$HOME/.gitconfig"  ]]; then
    cp -r "$DOTFILES_TEMPLATES_DIR/.gitconfig" "$HOME/.gitconfig"
    echo "Generated  $HOME/.gitconfig"
  else
    if grep -q "\[alias\]" "$HOME/.gitconfig"; then
      echo "$HOME/.gitconfig file already exists. Skipping."
    else
      echo "The [alias] string does not exist in the $HOME/.gitconfig file."
    fi
  fi
}

setup_vundle (){
  rm -rf "$DOTFILES_TEMPLATES_DIR/.vim/bundle/Vundle.vim"
  git clone https://github.com/VundleVim/Vundle.vim.git "$DOTFILES_TEMPLATES_DIR/.vim/bundle/Vundle.vim/"
  
  sleep 2
  if [[ ! -d "$HOME/.vim"  ]]; then
    cp -r "$DOTFILES_TEMPLATES_DIR/.vim" "$HOME/.vim" 
    echo "Generated  $HOME/.vim"
  else
    echo "$HOME/.vim file already exists. Skipping."
  fi
  if [[ ! -f "$HOME/.vimrc" ]]; then
    cp -r "$DOTFILES_TEMPLATES_DIR/.vimrc" "$HOME/.vimrc" 
    echo "Generated  $HOME/.vimrc"
  else
    echo "$HOME/.vimrc file already exists. Skipping."
  fi
  vim +PluginInstall +qall
  echo "install complete vundle"
}

setup_tmux_config (){
  if [[ ! -f "$HOME/.tmux.conf" ]]; then
    cp -r "$DOTFILES_TEMPLATES_DIR/.tmux.conf" "$HOME/.tmux.conf"
    echo "Generated  $HOME/.tmux.conf"
  else
    echo "$HOME/.tmux.conf file already exists. Skipping."
  fi
  tmux source-file "$HOME/.tmux.conf"
}

setup_zsh (){
  # Check if zsh is already installed
  if ! [ -x "$(command -v zsh)" ]; then
    echo 'zsh is not installed. Installing zsh...'
    
    # Install zsh on macOS
    if [ "$(uname)" == "Darwin" ]; then
      # Check if Homebrew is installed
      if ! [ -x "$(command -v brew)" ]; then
          echo 'Homebrew is not installed. Installing Homebrew...'
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
      
      # Install zsh with Homebrew
      brew install zsh
    # Install zsh on Debian 11
    elif [ "$(uname)" == "Linux" ]; then
      # Install zsh with apt
      sudo apt update
      sudo apt install -y zsh
    fi
  fi

  read -p "Do you want to default zsh? (y/n): " answer
  if [ "$answer" == "y" ]; then
    chsh -s $(which zsh)
  fi
  echo ""
  echo "Do you want to install zplug? follow below command"
  echo "zsh"
  echo "config setup_zplug"
}

setup_zplug (){
  # Install zplug
  if ! [ -d ~/.zplug ]; then
    echo 'zplug is not installed. Installing zplug...'
    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
  fi
  setup_init_zsh
}

setup_init_zsh (){
  if [[ -f "$HOME/.zshrc" ]]; then
    read -p "Do you want to remove the existing .zshrc file and create a new one? (y/n): " answer

    if [ "$answer" == "y" ]; then
      echo 'Removing the existing .zshrc file...'
      rm ~/.zshrc
      # Remove the existing .zshrc file
      echo 'Creating a new .zshrc file...'
      setup_init_zsh_step2
    fi
  else
    setup_init_zsh_step2
  fi
}

setup_init_zsh_step2 (){
  cp "$DOTFILES_TEMPLATES_DIR/.zshrc" "$HOME/.zshrc" 
  echo "Generated  $HOME/.vim"
  zsh
}

input_git_user (){
  local name
  local email
  echo "GIT user name"
  read name
  echo "GIT user email"
  read email
  git config user.name "$name"
  git config user.email "$email"
  git config --list | grep "user."
}

exit (){
  echo ""
  echo "You have chosen to exit"
  echo ""
}

main (){
  if [[ $1 == "setup_zplug" ]]; then
    
  else
    echo "Please enter the number of the desired item and press Enter."
    ask_no_words SELECT_INDEX ${MENU_NAMES}
    call_no_words ${SELECT_INDEX} ${MENU_FNS}
  fi
}
  
main "$@"